fn @main(%1:i32, %2:i32) -> i32 {
    %1:i32 = %2:*bool + %3:*i8
    %1:i32 = call @add() -> i32
    %1:i32 = %2:bool + %3:i8
    @1:i32 = $2:i16 - %3:i32
    %1:i32 = %2:i64 * %3:f32
    %1:i32 = %2:f64 / %3:i32
    %1:i32 = %2:i32 % %3:i32
    %1:i32 = %2:i32 & %3:i32
    %1:i32 = %2:i32 | %3:i32
    %1:i32 = %2:i32 ^ %3:i32
    %1:i32 = %2:i32 < %3:i32
    %1:i32 = %2:i32 <= %3:i32
    %1:i32 = %2:i32 > %3:i32
    %1:i32 = %2:i32 >= %3:i32
    %1:i32 = %2:i32 == %3:i32
    %1:i32 = %2:i32 != %3:i32
    1:
    %1:i32 = %2:i32
    if %1:bool then %label1 else %label2
    if %1:bool then %label1
    goto %label1
    %1:i32 = call @somefun(%1:i32, %2:i8) -> i32
    call @somefun(%1:i32, %2:i8)
    ret %1:i32
}
fn @consume(%fun:fn(i32, *bool)->f32) -> i32 {
    %1:i32 = local i32
    %2:i32 = addrof %1:i32
    %3:i32 = load %2:*i32
    store $1:i32 to %2:*i32
    %4:i32 = bitcast %2:*i32 to *i8
    %5:i32 = zeroext %1:i8 to i32
    %6:i32 = signext %2:i16 to i64
    %7:i32 = trunc %6:i64 to i32
    %8:i32 = fext %1:f32 to f64
    %9:i32 = ftrunc %8:f64 to f32
    %1:i32 = call %fun(%1:i32, %2:*bool) -> i32
    ret none
}
struct test {
    i8,
    *test,
    *test
}
decl @printf:fn(*i8)->i32
@symbol:i32 = global i32
fn @gep() {
    %1:i32 = local test, $10:i32
    %2:i32 = gep %1:*test, $0:i32, $1:i32
    store %1:*test to %2:**test
    ret none
}
